#!/usr/bin/perl
   eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
       if $running_under_some_shell;

# If debugging is the process of removing bugs, then programming must be the
# process of putting them in.
#   - Edsger Dijkstra

use strict;
use warnings;

use vars qw($VERSION);

$VERSION = '0.06';

=head1 NAME

tagr - flexibly tag files

=head1 SYNOPSIS

=head1 DESCRIPTION

=head2 Options

=over 3

=item B<-C>, B<--create-db>

Create a tags database in $HOME/.tagr

=item B<-f>, B<--find>

Find a file, a tag or a hash id

=item B<< -t <tag> >>, B<< --tag <tag> >>

Tag a file or (with -R) tag files recursively

=item B<-u>, B<--update>

Update tags on existing files

=item B<-v>, B<--version>

Display version number and exit

=item B<-h>, B<-?>, B<--help>

show a usage message

=back

=head1 BUGS

None known

=head1 LIMITATIONS

=head1 TO DO

=head1 AUTHOR

Kim Rutherford <kmr+tagr@xenu.org.uk>

http://www.xenu.org.uk

=cut

use File::Tagr;
use File::Tagr::DB;
use File::Tagr::Magic;
use File::Tagr::Cache;
use File::Tagr::Description;

use Term::ReadLine;
use Tree::Trie;

use Getopt::Long;
use Pod::Usage;
use Cwd qw(abs_path);
use File::Basename;

my $cdir = $File::Tagr::CONFIG_DIR;
my $option_parser = new Getopt::Long::Parser;
$option_parser->configure("gnu_getopt");

# set defaults
my %options = (
               tag => undef,
               describe => undef,
               find => undef,
               find_hash => undef,
               create_db => undef,
               clean_up => undef,
               delete_tag => undef,
               update => undef,
               mix => undef,
               shell => undef,
               get_tags => undef,
               get_description => undef,
               get_hash => undef,
               execute => undef,
               recurse => undef,
               username => getlogin(),
              );

my $need_help = 0;
my $need_version = 0;
my $verbose = 0;

my %opt_config = (
                  "tag|t=s" => \$options{tag},
                  "describe|d=s" => \$options{describe},
                  "find|f" => \$options{find},
                  "find-hash" => \$options{find_hash},
                  "create-db|C" => \$options{create_db},
                  "clean-up" => \$options{clean_up},
                  "delete-tag" => \$options{delete_tag},
                  "update|u" => \$options{update},
                  "mix|m" => \$options{mix},
                  "shell|s" => \$options{shell},
                  "get-tags|T" => \$options{get_tags},
                  "get-description|D" => \$options{get_description},
                  "get-hash|H" => \$options{get_hash},
                  "execute|e=s" => \$options{execute},
                  "recurse|R" => \$options{recurse},
                  "username|U=s" => \$options{username},
                  "version|V" => \$need_version,
                  "verbose|v" => \$verbose,
                  "help|h|?" => \$need_help,
                 );

my @IGNORE_PATTERNS = qw(\.tagr$ ~$ ~\.gz$ ^\..*$ ^CVS$ \.log(\.\d+)?$);
my $IGNORE_PATTERN = join '|', @IGNORE_PATTERNS;

my $HISTFILE = "$ENV{HOME}/.tagr_history";
my $HISTSIZE = 5000;

if (!$option_parser->getoptions(%opt_config)) {
  usage(2);
}

if ($need_help) {
  usage(1);
}

if ($need_version) {
  print "tagr version $VERSION\n";
  exit(0);
}

sub usage
{
  my $exit_val = shift;
  my $message = shift;
  if (defined $message) {
    pod2usage(-verbose => 1, -exitval => $exit_val, -message => $message);
  } else {
    pod2usage(-verbose => 1, -exitval => $exit_val);
  }
}

my $tagr = new File::Tagr(config_dir => $cdir, verbose => $verbose);

sub exit_and_commit
{
  my $exit_code = shift;
  $tagr->db()->txn_commit();
  exit($exit_code);
}

if ($options{create_db}) {
  if (@ARGV) {
    usage(2, "error: no arguments needed\n");
  }

  $tagr->create_db();
  exit_and_commit(0);
}

sub tag_file
{
  my $filepath = shift;
  my $auto = shift;
  my @tags = shift;

  if ($verbose) {
    warn qq[tagging "$filepath" with: @tags\n];
  }
  for my $tag (@tags) {
    $tagr->tag_file($filepath, $auto, $options{username}, $tag);
  }
}

if ($options{tag}) {
  if (@ARGV < 1) {
    usage(2, "error: one or more files arguments needed\n");
  }

  for my $file (@ARGV) {
    my $file_fullpath = _test_and_canon($file);
    if (defined $file_fullpath) {
      if ($options{recurse}) {
        _dir_recurse($file_fullpath, sub {
                       my $filepath = shift;
                       tag_file($filepath, 0, (split /,/, $options{tag}));
                     });
      } else {
        tag_file($file_fullpath, 0, (split /,/, $options{tag}));
      }
    }
  }
  exit_and_commit(0);
}

sub describe_file
{
  my $filename = shift;
  my $description = shift;

  my @tags = File::Tagr::Description->get_tags_from_string($description);
  $tagr->describe_file($filename, $description);

  for my $tag (@tags) {
    $tag = lc $tag;
    tag_file($filename, 1, $tag);
  }
}

if ($options{describe}) {
  if (@ARGV < 1) {
    usage(2, "error: one or more files arguments needed\n");
  }

  for my $file (@ARGV) {
    my $file_fullpath = _test_and_canon($file);
    if (defined $file_fullpath) {
      if ($options{recurse}) {
        _dir_recurse($file_fullpath, sub {
                       my $filepath = shift;
                       describe_file($filepath, $options{describe});
                     });
      } else {
        describe_file($file_fullpath, $options{describe});
      }
    }
  }
  exit_and_commit(0);
}


sub _dir_recurse
{
  my $file = shift;
  my $cb = shift;
  my @args = @_;

  my $file_fullpath = _test_and_canon($file);

  if (!defined $file_fullpath) {
    return;
  }

  my $file_lastpart = fileparse($file_fullpath);

  if ($file_lastpart =~ /$IGNORE_PATTERN/) {
    if ($verbose) {
      warn "ignored: $file_fullpath\n";
    }
    return;
  }

  if (-f $file_fullpath) {
    &${cb}($file_fullpath, @args);
  } else {
    if (-d $file_fullpath) {
      if ($verbose) {
        warn "recursing: $file_fullpath\n";
      }
      opendir my $dh, "$file_fullpath" or die "can't open directory: $file_fullpath - $!\n";
      while (defined(my $dir_ent = readdir($dh))) {
        if ($dir_ent ne '..' and $dir_ent ne '.') {
          _dir_recurse("$file_fullpath/$dir_ent", $cb, @args);
        }
      }
      closedir $dh;
    }
  }
}

sub update_file
{
  my $filepath = shift;
  if ($verbose) {
    warn qq[updating "$filepath"\n];
  }
  $tagr->update_file($filepath, $options{username});
}

if (defined $options{update}) {
  if (@ARGV < 1) {
    usage(2, "error: one or more files arguments needed\n");
  }

  for my $file (@ARGV) {
    my $file_fullpath = _test_and_canon($file);
    if ($file_fullpath) {
      if ($options{recurse}) {
        _dir_recurse($file_fullpath, sub {
                       my $filepath = shift;
                       update_file($filepath, @_);
                     });
      } else {
        $tagr->update_file($file_fullpath, $options{username});
      }
    }
  }
  $tagr->db()->txn_commit();
  exit_and_commit(0);
}

if (defined $options{find}) {
  if (!@ARGV) {
    usage(2, "error: enough arguments\n");
  }

  my @filenames = ();
  for my $file ($tagr->find_file_by_tag(@ARGV)) {
    if (!defined $options{execute}) {
      print $file->detail(), "\n";
    }
    push @filenames, $file->detail();
  }

  if ($verbose && @filenames == 0) {
    warn "no files found for tag(s): @ARGV\n"; 
  }

  if (@filenames == 0) {
    for my $file ($tagr->find_file_by_hash(@ARGV)) {
      my $filename = $file->detail();
      if (!defined $options{execute}) {
        print $filename, "\n";
      }
      push @filenames, $filename;
    }
  }

  if (@filenames == 0) {
    for my $arg_filename (@ARGV) {
      my $file_arg_fullpath = _test_and_canon($arg_filename);
      for my $file ($tagr->find_file_by_file_hash($file_arg_fullpath)) {
        if (!defined $options{execute}) {
          print $file->detail(), "\n";
        }
        push @filenames, $file->detail();
      }
    }
  }

  if (defined $options{execute} && @filenames) {
    system($options{execute}, @filenames);
  }

  if ($verbose && @filenames == 0) {
    warn "no matches found\n";
  }

  exit_and_commit(0);
}

if (defined $options{find_hash}) {
  if (!@ARGV) {
    usage(2, "error: enough arguments\n");
  }

  my @filenames = ();
  for my $file ($tagr->find_hash_by_tag(\@ARGV)->all()) {
    my $filename = $file->detail();
    if (!defined $options{execute}) {
      print $filename, "\n";
    }
    push @filenames, $filename;
  }

  if (defined $options{execute} && @filenames) {
    system($options{execute}, @filenames);
  }

  if ($verbose && @filenames == 0) {
    warn "no matches found\n";
  }

  exit_and_commit(0);
}

sub shell_tag
{
  my $filename = shift;
  my $term = shift;
  my $trie = shift;

  if (!defined $trie) {
    die "\$trie not defined\n";
  }

  my $file = $tagr->update_file($filename, $options{username});

  my $OUT = $term->OUT || \*STDOUT;

  my @tag_names = map {$_->detail} $file->hash_id()->tags();

  my $current_description = $file->hash_id()->description_id();

  if (defined $current_description) {
    warn "current description: ", $current_description->detail(), "\n";
    $term->addhistory($current_description->detail());
  } else {
    warn "no current description\n";
    if ($filename =~ m:/([^/]+_[^/]+$):) {
      my $file_name_for_history = $1;
      $file_name_for_history =~ s/_/ /g;
      $file_name_for_history =~ s/\..*$//;
      $term->addhistory($file_name_for_history);
    }
  }
  warn "current tags: @tag_names\n";

  if (grep {$_ eq 'image'} @tag_names) {
    my $cache = $tagr->get_cache();
    my @filenames =
      $cache->get_image_from_cache($file->hash_id(),
                                   [$File::Tagr::BIG_IMAGE_SIZE]);
    my $image_file = $cache->cache_dir() . '/' . $filenames[0];
    system "xloadimage -border black -center -onroot -quiet -zoom 50 $image_file";
  }

  my $line = $term->readline("description for $filename: ");

  if (defined $line) {
    if (length $line > 0) {
      if (grep {$_ eq $line} qw[q quit exit quit]) {
        exit_and_commit(0);
      }

      if ($line =~ s/\s*;;\s*(.*?)\s*$//) {
        my $tagstring = $1;

        my @words = split / /, $tagstring;
        for my $word (@words) {
          if (!$trie->lookup($word, Tree::Trie::EXACT)) {
            $trie->add($word);
          }
          tag_file($filename, 0, $options{username}, $word);
          $tagr->db->txn_commit();
        }
      }

      warn $@ if $@;

      my @tags = File::Tagr::Description->get_tags_from_string($line);
      $tagr->describe_file($filename, $line);

      for my $tag (@tags) {
        $tag = lc $tag;
        if (!$trie->lookup($tag, Tree::Trie::EXACT)) {
          $trie->add($tag);
        }
        tag_file($filename, 1, $options{username}, $tag);
        $tagr->db->txn_commit();
      }
    }
  } else {
    warn "\n";
    system("xsetroot -solid black &");
    exit_and_commit(0);
  }

  $term->WriteHistory($HISTFILE);

  $tagr->db()->txn_commit();
}

if ($options{shell}) {
  if (@ARGV < 1) {
    usage(2, "error: one or more files arguments needed\n");
  }

  my $term = new Term::ReadLine 'Tagr shell';
  my $attribs = $term->Attribs;

  $term->stifle_history($HISTSIZE);
  if (-f $HISTFILE) {
    $term->ReadHistory($HISTFILE)
    or warn "perlsh: cannot read history file: $!\n";
  }

  my $trie = new Tree::Trie;

  my @tag_names = $tagr->get_tag_names();

  $trie->add(@tag_names);

  $attribs->{completion_function} = sub {
    my ($text, $line, $start) = @_;
    return map {s/$text/$text/i; $_} $trie->lookup(lc $text);
  };

  for my $file (@ARGV) {
    my $file_fullpath = _test_and_canon($file);
    if ($file_fullpath) {
      if ($options{recurse}) {
        _dir_recurse($file_fullpath, sub {
                       my $filepath = shift;
                       shell_tag($filepath, @_);
                     }, $term, $trie);
      } else {
        shell_tag($file_fullpath, $term, $trie);
      }
    }
  }
  $tagr->db()->txn_commit();
  exit_and_commit(0);
}

if (defined $options{get_description}) {
  if (!@ARGV) {
    usage(2, "error: one or more filename arguments needed\n");
  }

  for my $filename (@ARGV) {
    my $file_fullpath = _test_and_canon($filename);
    if ($file_fullpath) {
      my $description = $tagr->get_description_of_file($file_fullpath);

      if (defined $description) {
        if ($verbose) {
          print "$filename: ", $description->detail(), "\n";
        } else {
          print $description->detail(), "\n";
        }
      } else {
        if ($verbose) {
          warn "no description found for: $file_fullpath\n";
        }
      }
    }
  }
}

if (defined $options{get_hash}) {
  if (!@ARGV) {
    usage(2, "error: one or more filename arguments needed\n");
  }

  for my $filename (@ARGV) {
    my $file_fullpath = _test_and_canon($filename);
    if ($file_fullpath) {
      my $hash = $tagr->get_hash_of_file($file_fullpath);

      if (defined $hash) {
        if ($verbose) {
          print "$filename: ", $hash->detail(), "\n";
        } else {
          print $hash->detail(), "\n";
        }
      } else {
        if ($verbose) {
          warn "no hash found for: $file_fullpath\n";
        }
      }
    }
  }
}

if (defined $options{get_tags}) {
  if (!@ARGV) {
    usage(2, "error: one or more filename or hash digest arguments needed\n");
  }

  for my $arg (@ARGV) {
    my $file_fullpath = _test_and_canon($arg);
    if ($file_fullpath && -f $file_fullpath) {
      my @tags = $tagr->get_tags_of_file($file_fullpath);

      if ($options{mix}) {
        # to do - shuffle list
        @tags = @tags;
      }

      if (@tags) {
        my @tag_names = map {$_->detail()} @tags;

        if ($verbose) {
          print "$arg: @tag_names\n";
        } else {
          print "@tag_names\n";
        }

      } else {
        if ($verbose) {
          warn "no tags found for file: $file_fullpath\n";
        }
      }
    } else {
      my @tags = $tagr->get_tags_of_hash($arg, -1);

      if ($options{mix}) {
        # to do - shuffle list
        @tags = @tags;
      }

      if (@tags) {
        my @tag_names = map {$_->detail()} @tags;

        if ($verbose) {
          print "$arg: @tag_names\n";
        } else {
          print "@tag_names\n";
        }

      } else {
        if ($verbose) {
          warn "no tags found for: $arg\n";
        }
      }
    }
  }

}

if (defined $options{delete_tag}) {
  if (!@ARGV) {
    usage(2, "error: one or more filename or hash digest arguments needed\n");
  }

  my $digest = shift;
  my $tag = shift;

  $tagr->delete_tag_from_hash($digest, $tag);

  exit_and_commit(0);
}

sub _test_and_canon
{
  my $file = shift;
  if (-l $file) {
    if ($verbose) {
      warn "ignoring symbolic link: $file\n";
    }
    return undef;
  }

  if (!-r $file) {
    if ($verbose) {
      warn "ignoring unreadable file: $file\n";
    }
    return undef;
  }

  my $file_fullpath = abs_path($file);

  return $file_fullpath;
}

if (defined $options{clean_up}) {
  if ($verbose) {
    warn "cleaning ...\n";
  }
  $tagr->clean_up();
  if ($verbose) {
    warn "done\n";
  }

  exit_and_commit(0);
}
